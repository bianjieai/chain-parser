package integration

import (
	"encoding/hex"
	"fmt"
	. "github.com/bianjieai/chain-parser/common-parser/codec"
	"github.com/bianjieai/chain-parser/common-parser/utils"
)

func (s IntegrationTestSuite) TestFarm() {
	cases := []SubTest{
		{
			"unstake",
			unstake,
		},
		{
			"stake",
			stake,
		},
		{
			"createPool",
			createPool,
		},
		{
			"createPoolWithCommunityPool",
			createPoolWithCommunityPool,
		},
		{
			"destroyPool",
			destroyPool,
		},
		{
			"adjustPool",
			adjustPool,
		},
		{
			"harvest",
			harvest,
		},
	}

	for _, t := range cases {
		s.Run(t.testName, func() {
			t.testCase(s)
		})
	}
}

func unstake(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, irismod := range authTx.GetMsgs() {
		if bankDoc, ok := s.Farm.HandleTxMsg(irismod); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func stake(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, irismod := range authTx.GetMsgs() {
		if bankDoc, ok := s.Farm.HandleTxMsg(irismod); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func createPool(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, irismod := range authTx.GetMsgs() {
		if bankDoc, ok := s.Farm.HandleTxMsg(irismod); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func createPoolWithCommunityPool(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, irismod := range authTx.GetMsgs() {
		if bankDoc, ok := s.Farm.HandleTxMsg(irismod); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func destroyPool(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString("0A570A550A1C2F697269736D6F642E6661726D2E4D736744657374726F79506F6F6C12350A076661726D2D3434122A696161316571766B667468747272393367347039717370703534773664746A74726E3237617237727077126B0A510A460A1F2F636F736D6F732E63727970746F2E736563703235366B312E5075624B657912230A21038BE4539785F0621A19066EB2DA45C11DCC5FCCFF5D58E89C670BB80D251CC1B712040A02080118EA0112160A100A05756972697312073130303030303010C09A0C1A40C01E4CB8540F92CF91CBEA7E827E68416C48B516F56C0B8D7383DA77AFC0F920496F0CA57A961F6904B745258AE0A08BD2A39C97E58ED380D7F0E23CBAB9D637")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, irismod := range authTx.GetMsgs() {
		if bankDoc, ok := s.Farm.HandleTxMsg(irismod); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func adjustPool(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString("0A620A600A1B2F697269736D6F642E6661726D2E4D736741646A757374506F6F6C12410A076661726D2D33331A0A0A057569726973120132222A696161316571766B667468747272393367347039717370703534773664746A74726E323761723772707712590A510A460A1F2F636F736D6F732E63727970746F2E736563703235366B312E5075624B657912230A21038BE4539785F0621A19066EB2DA45C11DCC5FCCFF5D58E89C670BB80D251CC1B712040A020801188E01120410C09A0C1A40BB6DB7CF5423F6CD59F85754B499D814D83F59B32D755F5F36D58FE06E2C9EC7329DD1E5FD86506AB61DEC8A54177033DA475539058DD26D8EA367D4C4F1D425")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, irismod := range authTx.GetMsgs() {
		if bankDoc, ok := s.Farm.HandleTxMsg(irismod); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func harvest(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString("0A560A510A182F697269736D6F642E6661726D2E4D73674861727665737412350A076661726D2D3638122A696161316571766B667468747272393367347039717370703534773664746A74726E3237617237727077120120126A0A510A460A1F2F636F736D6F732E63727970746F2E736563703235366B312E5075624B657912230A21038BE4539785F0621A19066EB2DA45C11DCC5FCCFF5D58E89C670BB80D251CC1B712040A02080118981112150A0F0A05756972697312063430303030301080B5181A4030292A9A67518A2B189EE1E86D486E7F1019097BF4319E54997D65B2781A353A2BCDC4BA4EE14E5389E0B63C9CB4F152D464741DE3C17971DA71B2BBC8773CD0")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, irismod := range authTx.GetMsgs() {
		if bankDoc, ok := s.Farm.HandleTxMsg(irismod); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}
