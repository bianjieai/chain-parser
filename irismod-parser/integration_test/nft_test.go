package integration

import (
	"encoding/hex"
	"fmt"
	. "github.com/bianjieai/chain-parser/common-parser/codec"
	"github.com/bianjieai/chain-parser/common-parser/utils"
)

func (s IntegrationTestSuite) TestNft() {
	cases := []SubTest{
		{
			"IssueDenom",
			IssueDenom,
		},
		{
			"TransferDenom",
			TransferDenom,
		},
		{
			"NFTMint",
			NFTMint,
		},
		{
			"NFTTransfer",
			NFTTransfer,
		},
		{
			"NFTEdit",
			NFTEdit,
		},
		{
			"NFTBurn",
			NFTBurn,
		},
	}

	for _, t := range cases {
		s.Run(t.testName, func() {
			t.testCase(s)
		})
	}
}

func IssueDenom(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString("0A5C0A5A0A1A2F697269736D6F642E6E66742E4D7367497373756544656E6F6D123C0A0A617564696F7465737432222A6961613137636A64673633746879327666717676676A356C667635647033333974306C726132677138753001380112590A510A460A1F2F636F736D6F732E63727970746F2E736563703235366B312E5075624B657912230A2102A53EA4DC106AE521C8354FD35F57149A9EEC9530332D2D6C53C80BB3F323A7D412040A02080118F022120410C09A0C1A40135FD58987F1E031713DBF9C63B3A7C20C53A08A8550DD4E1E6AA6B25207CDF576EFB901537124E5FB4925D08130AB380DAFB0BBDFAF30D03BF717D3C6221DE6")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if bankDoc, ok := s.Nft.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func TransferDenom(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if bankDoc, ok := s.Nft.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func NFTMint(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if bankDoc, ok := s.Nft.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func NFTTransfer(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if bankDoc, ok := s.Nft.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func NFTEdit(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString("0AA5010AA2010A172F697269736D6F642E6E66742E4D7367456469744E46541286010A05796C373531120764656E6F6D37351A0F5B646F2D6E6F742D6D6F646966795D220F5B646F2D6E6F742D6D6F646966795D2A15667364676676736466686473646A6B686466647366322A69616131366D7636686D7836677779656E3578756A327A6E7867753432667A637830793772676436386A3A0F5B646F2D6E6F742D6D6F646966795D12590A510A460A1F2F636F736D6F732E63727970746F2E736563703235366B312E5075624B657912230A2102B4493B55EA95EB46CE533A2EA8185B22CF7816D0F112CCDEA0A6911A2820EA2612040A02080118ED03120410C09A0C1A400197092A7161E8C3A9FBBCBCEA63A1DE749DA47D1F247431546558AEC7D9CF3100619FD2FDD2C2A1C4B84DD0F12527CFB6D3DB0629A7BB761B644BDD8BDEF7BF")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if bankDoc, ok := s.Nft.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}

func NFTBurn(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)
	txBytes, err := hex.DecodeString("0A5A0A580A172F697269736D6F642E6E66742E4D73674275726E4E4654123D0A06796C39373239120764656E6F6D39371A2A69616131366D7636686D7836677779656E3578756A327A6E7867753432667A637830793772676436386A12590A510A460A1F2F636F736D6F732E63727970746F2E736563703235366B312E5075624B657912230A2102B4493B55EA95EB46CE533A2EA8185B22CF7816D0F112CCDEA0A6911A2820EA2612040A02080118F203120410C09A0C1A40CECD530496F88EA7590220F5BB6237CA957B7CD61F36ECC80C7C7C3B2A6F792542C954C4D02BCE919BA7228AD2622B8E55874130B73B8E3876EB5300DC155195")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if bankDoc, ok := s.Nft.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(bankDoc))
		}
	}
}
